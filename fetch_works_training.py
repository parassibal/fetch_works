# -*- coding: utf-8 -*-
"""fetch_works.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Dwg91iWACDcDAoA7P4-Hu49B6fLlciPo
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from torch.autograd import Variable

df = pd.read_csv("data_daily.csv")
df.head()

df.shape

df.describe

from datetime import datetime
df['# Date'] = pd.to_datetime(df['# Date'])

df.head()

df.dtypes

import matplotlib.pyplot as plt
import seaborn as sns

plt.figure(figsize=(15, 10))
plt.plot(df['# Date'], df['Receipt_Count'], color='green')
plt.xlabel('Date')
plt.ylabel('Receipt_Count')
plt.title('Receipt Count in 2021')
plt.legend()
plt.show()

df.head()

month_dict = dict()
for month in range(1,13):
    month_dict[month] = 0

month_dict

df["Receipt_Count"].iloc[0]

iloc_val = 0
for date in df["# Date"]:
    month = date.month
    month_dict[month] += df["Receipt_Count"].iloc[iloc_val]

month_dict

month_list = [month for month in month_dict.keys()]
month_list

receipt_counter = [count for count in month_dict.values()]
receipt_counter

min_val = min(receipt_counter)
max_val = max(receipt_counter)

for idx, count in enumerate(receipt_counter):
    receipt_counter[idx] = (receipt_counter[idx] - min_val) / (max_val - min_val)

receipt_counter

new_df = pd.DataFrame(data = {"Date" : month_list, "Receipt_Count": receipt_counter})
new_df.head()

from torch import nn
import torch

def reshape_conversion(data):
    numpyarray = np.array(data)
    numpyarray_dtype = numpyarray.astype(np.float32)
    numpyarray_reshape = numpyarray_dtype.reshape(-1, 1)
    tensor_array = torch.tensor(numpyarray_reshape)
    tensor_array = Variable(tensor_array)
    return tensor_array

month_data1 = reshape_conversion(month_list[0:11])
month_data2 = reshape_conversion(month_list[-1])

receipt_count_data1 = reshape_conversion(receipt_counter[0:11])
receipt_count_data2 = reshape_conversion(receipt_counter[-1])

receipt_count_data1

import tensorflow as tf
from keras.models import Sequential
from keras.layers import LSTM, Dense, Dropout
from keras.optimizers import Adam
from keras.callbacks import EarlyStopping, ReduceLROnPlateau, ModelCheckpoint

def datamodel():
    model = Sequential()
    model.add(LSTM(100, activation='relu', return_sequences=True, input_shape=(1, 1)))
    model.add(Dropout(0.3))
    model.add(LSTM(50, activation='relu'))
    model.add(Dense(1))
    return model

model = datamodel()
model.compile(loss='mean_squared_error', optimizer=Adam(lr=0.001))
early_stopping = EarlyStopping(monitor='train_loss', patience=10, restore_best_weights=True)
reduce_lr = ReduceLROnPlateau(monitor='train_loss', factor=0.2, patience=5, min_lr=1e-6)
month_data1 = tf.convert_to_tensor(month_data1, dtype=tf.float32)
receipt_count_data1 = tf.convert_to_tensor(receipt_count_data1, dtype=tf.float32)
model_checkpoint = ModelCheckpoint('bestmodel.h5',monitor='train_loss', save_best_only=True)
model_fit = model.fit(month_data1, receipt_count_data1, epochs=100, verbose=1, callbacks=[early_stopping, reduce_lr, model_checkpoint])
model_fit

model.save("bestmodel.h5")

month_data2 = tf.convert_to_tensor(month_data2, dtype=tf.float32)
receipt_count_data2 = tf.convert_to_tensor(receipt_count_data2, dtype=tf.float32)
test_loss = model.evaluate(month_data2, receipt_count_data2, verbose=0)
print("Test Loss:", test_loss)

